{"version":3,"file":"static/js/203.a74b43b1.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/Title/Title.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  min-width: 300px;\n  max-width: 400px;\n  margin: 0 auto;\n  margin-top: 28px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  font-size: 20px;\n  margin-bottom: 12px;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  font-size: 20px;\n  text-transform: uppercase;\n  background-color: #808080;\n  color: #ffffff;\n  border: 2px solid #ffffff;\n  border-radius: 5px;\n  padding: 5px 2px;\n  transition: all cubic-bezier(0.25s, 0.7, 0.98, 0.86) 0s;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #ffffff;\n    border: 2px solid #808080;\n    color: #808080;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectExistingContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!contacts) return;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { List, Item, Text, Button } from './ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectExistingContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectExistingContacts);\n\n  if (!contacts) return;\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <Text>\n            {name}: {number}{' '}\n          </Text>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Typography } from '@mui/material';\n\nexport const Title = ({ title }) => {\n  return (\n    <Typography variant=\"h4\" component=\"h2\" color=\"secondary\">\n      {title}\n    </Typography>\n  );\n};\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  min-width: 300px;\n  max-width: 500px;\n  margin: 0 auto;\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  text-transform: uppercase;\n  font-size: 16px;\n  margin-bottom: 16px;\n  background-color: transparent;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 16px;\n  font-size: 20px;\n  border: none;\n  outline: 2px solid #ffffff;\n  border-radius: 5px;\n  background-color: #ffffff;\n  color: #212121;\n  transition: all cubic-bezier(0.25s, 0.7, 0.98, 0.86) 0s;\n  &:focus {\n    outline: 2px solid #808080;\n    border-radius: 5px;\n  }\n`;\n\nexport const Button = styled.button`\n  font-size: 20px;\n  text-transform: uppercase;\n  background-color: #808080;\n  color: #ffffff;\n  border: 2px solid #ffffff;\n  border-radius: 5px;\n  padding: 10px 4px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n  transition: all cubic-bezier(0.25s, 0.7, 0.98, 0.86) 0s;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #ffffff;\n    border: 2px solid #808080;\n    color: #808080;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from 'redux/contacts/operations';\nimport { Wrapper, Input, Label, Button } from './ContactForm.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const inputChange = event => {\n    if (event.target.name === 'name') {\n      setName(event.target.value);\n    }\n    if (event.target.name === 'phone') {\n      setPhone(event.target.value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const contact = {\n      name,\n      phone,\n    };\n\n    const isAtList = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isAtList) {\n      alert('Already in list');\n      return;\n    }\n\n    if (name.trim() === '') {\n      alert('Please enter a name');\n      return;\n    }\n\n    dispatch(addContact(contact));\n    event.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Wrapper>\n        <Label htmlFor=\"name\">Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Z\\s]+$\"\n          pattern=\"^[А-Яа-яЁёa-zA-Z\\s]+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={inputChange}\n        />\n      </Wrapper>\n      <Wrapper>\n        <Label htmlFor=\"number\">Phone number</Label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"^[0-9]+$\"\n          pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={inputChange}\n        />\n      </Wrapper>\n      <Button type=\"submit\"> Create </Button>\n    </form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Text = styled.p`\n  text-transform: uppercase;\n  margin-bottom: 16px;\n  font-size: 16px;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  min-width: 300px;\n  max-width: 500px;\n  padding: 16px;\n  font-size: 20px;\n  border: none;\n  outline: 2px solid #ffffff;\n  border-radius: 5px;\n  background-color: #ffffff;\n  color: #212121;\n  transition: all cubic-bezier(0.25s, 0.7, 0.98, 0.86) 0s;\n  &:focus {\n    outline: 2px solid #808080;\n    border-radius: 5px;\n  }\n`;\n","import { Input, Text } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <Text>Find contact by name</Text>\n      <Input\n        type=\"text\"\n        onChange={e => {\n          dispatch(filterContacts(e.target.value));\n        }}\n      />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Title } from 'components/Title/Title';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container\n      maxWidth=\"xs\"\n      sx={{\n        textAlign: 'center',\n        mt: '64px',\n      }}\n    >\n      <Title title=\"Phonebook 📱\" />\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["List","styled","Item","Text","Button","selectContacts","state","contacts","selectIsLoading","isLoading","selectExistingContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactList","dispatch","useDispatch","useSelector","map","id","number","type","onClick","deleteContact","Title","title","Typography","variant","component","color","Wrapper","Label","Input","ContactForm","useState","setName","phone","setPhone","inputChange","event","target","value","onSubmit","preventDefault","isAtList","find","alert","trim","addContact","reset","htmlFor","pattern","required","onChange","Filter","e","filterContacts","Contacts","useEffect","fetchContacts","Container","maxWidth","sx","textAlign","mt"],"sourceRoot":""}